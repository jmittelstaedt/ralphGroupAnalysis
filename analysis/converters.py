# converter from plain to code names for all STFMR procedures
STFMRConverter = {
    "Sample Name": ('sample_name', str),
    "Start Magnetic Field": ('field_strength_start', float),
    "End Magnetic Field": ('field_strength_end', float),
    "Magnetic Field Step": ('field_strength_step', float),
    "Magnetic Field Azimuthal Angle": ('field_azimuth', float),
    "Magnetic Field Polar Angle": ('field_polar', float),
    "Magnet Calibration Filename": ('mag_calib_name', str),
    "Delay": ('delay', float),
    "Swap Field": ('field_swap', bool),
    "RF Frequency": ('rf_freq', float),
    "RF Power": ('rf_power', float),
    "Lockin Sensitivity": ('sensitivity', float),
    "Lockin Time Constant": ('time_constant', float),
    "Current to Magnetic Field Calibration": ('current2field_calib_name', str),
    "Magnetic Field to Current Calibration": ('field2current_calib_name', str),
    "temperature Setpoint": ('temperature', float),
    "Automatically Change Setpoint": ('control_temp', bool),
    "Temp Equilibration Time": ('equilibration_time', float),
    "Use Bias Current": ('use_bias', bool),
    "DC Bias Current": ('dc_bias', float),
    "Time Queued": ('queued_time', str)
}

HallConverter = {
    "Sample Name": ('sample_name', str),
    "Magnetic Field Polar Angle": ('field_polar', float),
    "Magnetic Field Azimuthal Angle": ('field_azimuth', float),
    "Start Azimuthal Field": ('field_azimuth_start', float),
    "End Azimuthal Field": ('field_azimuth_end', float),
    "Azimuthal Field Step": ('field_azimuth_step', float),
    "Magnet Calibration Filename": ('mag_calib_name', str),
    "Delay": ('delay', float),
    "Field Strength": ('field_strength', float),
    "Magnetic Field Strength" : ('field_strength', float),
    "First Harmonic Lockin Sensitivity": ('sensitivity1', float),
    "Second Harmonic Lockin Sensitivity": ('sensitivity2', float),
    "First Harmonic Lockin Time Constant": ('time_constant1', float),
    "Second Harmonic Lockin Time Constant": ('time_constant2', float),
    "Applied Sample Voltage": ('applied_voltage', float),
    "Initial Field Strength": ('field_strength_start', float),
    "Final Field Strength": ('field_strength_end', float),
    "Field Strength Step": ('field_strength_step', float),
    "Swap Field": ('field_swap', bool),
    "Current to Magnetic Field Calibration": ('current2field_calib_name', str),
    "Magnetic Field to Current Calibration": ('field2current_calib_name', str),
    "temperature Setpoint": ('temperature', float),
    "Automatically Change Setpoint": ('control_temp', bool),
    "Temp Equilibration Time": ('equilibration_time', float),
    "Start Magnetic Field Strength": ('field_strength_start', float),
    "End Magnetic Field Strength": ('field_strength_end', float),
    "Magnetic Field Strength Step": ('field_strength_step', float),
    "Magnetic Field Azumuthal Angle": ('field_azimuth', float) # I'm bad at spelling :'(
}

FMRConverter = {
    "Sample": ('sample', str),
    "RF frequency": ('frequency', float),
    'RF power': ('power', float),
    "Start field": ('start_field', float),
    "End field": ('end_field', float),
    "AC Field Voltage": ('ac_voltage', float),
    "Sensitivity": ('sensitivity', float),
    "Time Constant": ('time_constant', float),
    "Field points": ('field_points', int),
    "Trace period": ('trace_period', float),
    "Trace averages": ('trace_averages', int),
    "Field calibration directory": ('calibration_directory', str),
    "Start time": ('start_time', str),
    "Average period": ('average_period', float),
    "Point averages": ('point_averages', float),
    "Point delay": ('point_delay', float)
}

AMRConverter = {
    "Sample Name": ('sample_name', str),
    "Magnetic Field Polar Angle": ('field_polar', float),
    "Start Azimuthal Field": ('field_azimuth_start', float),
    "End Azimuthal Field": ('field_azimuth_end', float),
    "Azimuthal Field Step": ('field_azimuth_step', float),
    "Magnet Calibration Filename": ('mag_calib_name', str),
    "Delay": ('delay', float),
    "Field Strength": ('field_strength', float),
    "Lockin Sensitivity": ('sensitivity', float),
    "Lockin Time Constant": ('time_constant', float),
    "Applied Sample Voltage": ('applied_voltage', float),
    "Wheatstone R1 Fixed Resistance": ('wheatsone_R1', float),
    "Wheatstone R2 Variable Resistance": ('wheatsone_R2', float),
    "Wheatstone R3 Fixed Resistance": ('wheatsone_R3', float),
    "Magnetic Field Azimuthal Angle": ('field_azimuth', float),
    "Initial Field Strength": ('field_strength_start', float),
    "Final Field Strength": ('field_strength_end', float),
    "Field Strength Step": ('field_strength_step', float),
    "Swap Field": ('field_swap', bool),
    "Current to Magnetic Field Calibration": ('current2field_calib_name', str),
    "Magnetic Field to Current Calibration": ('field2current_calib_name', str),
    "temperature Setpoint": ('temperature', float),
    "Automatically Change Setpoint": ('control_temp', bool),
    "Temp Equilibration Time": ('equilibration_time', float)
}

VectorIPHallConverter = {
    "Sample Name": ('sample_name', str),
    "saturate z field": ('enable_zfield_saturate', bool),
    "Saturation field Z": ('saturation_zfield', float),
    "fixed_oop_field": ('Fixed Z', bool),
    "Start field value": ('field_start', float),
    "End field value": ('field_end', float),
    "field value step": ('field_step', float),
    "Delay for phi sweep": ('field_sweep_delay', float),
    "Fixed phi value for field sweep": ('field_sweep_fixed_phi', float),
    "temperature Setpoint": ('temp_setpoint', float),
    "First Harmonic Lockin Sensitivity": ('sensitivity1', float),
    "First Harmonic Lockin Time Constant": ('time_constant1', float),
    "Applied Lockin Voltage": ('applied_voltage', float),
    "Applied Sample Voltage": ('applied_voltage', float),
    "Lockin Driving Frequency": ('lockin_freq', float),
    "Lockin Measurement Phase Offset": ('lockin_phase', float),
    "Current Stabilizing Resistance": ('current_stabilizing_resistance', float),
    "Using Amplifier": ('using_amplifier', bool),
    "Amplifier Gain": ('amplifier_gain', float),
    "Amplifier Filter Lower Cutoff": ('amplifier_filter_low_cutoff', float),
    "Amplifier Filter Upper Cutoff": ('amplifier_filter_hi_cutoff', float)
}